Index: panels.module
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/panels.module,v
retrieving revision 1.25
diff -u -u -p -r1.25 panels.module
--- panels.module	23 Aug 2008 00:57:55 -0000	1.25
+++ panels.module	30 Aug 2008 23:15:19 -0000
@@ -156,7 +156,7 @@ function panels_menu() {
 
   // Non-display editor callbacks
   $items['panels/node/autocomplete'] = array(
-    'title' => t('Autocomplete node'),
+    'title' => 'Autocomplete node',
     'page callback' => 'panels_node_autocomplete',
     'file' => 'includes/callbacks.inc',
   ) + $base;
@@ -177,11 +177,11 @@ function panels_menu() {
 
   // Provide a nice location for a panels admin panel.
   $items['admin/panels'] = array(
-    'title' => t('Panels'),
+    'title' => 'Panels',
     'access arguments' => array('access administration pages'),
     'page callback' => 'panels_admin_page',
     'file' => 'includes/callbacks.inc',
-    'description' => t('Administer items related to the Panels module.'),
+    'description' => 'Administer items related to the Panels module.',
   );
 
   return $items;
@@ -826,7 +826,8 @@ function panels_var_export($object, $pre
     $output = 'array()';
   }
   else {
-    $output = var_export($object, TRUE);
+    // Remove extra space to match Drupal coding standards.
+    $output = str_replace('array (', 'array(', var_export($object, TRUE));
   }
 
   if ($prefix) {
Index: arguments/vid.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/arguments/vid.inc,v
retrieving revision 1.4
diff -u -u -p -r1.4 vid.inc
--- arguments/vid.inc	19 Aug 2008 14:57:58 -0000	1.4
+++ arguments/vid.inc	30 Aug 2008 23:15:19 -0000
@@ -35,7 +35,7 @@ function panels_vid_context($arg = NULL,
     return PANELS_ARG_IS_BAD;
   }
 
-  $vocabulary = taxonomy_get_vocabulary($arg);
+  $vocabulary = taxonomy_vocabulary_load($arg);
   if (!$vocabulary) {
     return PANELS_ARG_IS_BAD;
   }
Index: content_types/node_comment_form.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/content_types/node_comment_form.inc,v
retrieving revision 1.3
diff -u -u -p -r1.3 node_comment_form.inc
--- content_types/node_comment_form.inc	19 Aug 2008 07:04:10 -0000	1.3
+++ content_types/node_comment_form.inc	30 Aug 2008 23:15:19 -0000
@@ -65,7 +65,7 @@ function panels_comment_form($edit) {
   // force the form to come back to here.
   $url = parse_url($_GET['q']);
   $path = $url['path'];
-  $form['#action'] = url($path, NULL, 'new');
+  $form['#action'] = url($path, NULL, array('fragment' => 'new'));
   $form['#redirect'] = array($path, NULL, 'new');
   $form['#validate']['comment_form_validate'] = array();
   $form['#submit']['comment_form_submit'] = array();
Index: contexts/node.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/contexts/node.inc,v
retrieving revision 1.6
diff -u -u -p -r1.6 node.inc
--- contexts/node.inc	25 Aug 2008 04:13:16 -0000	1.6
+++ contexts/node.inc	30 Aug 2008 23:15:19 -0000
@@ -118,8 +118,9 @@ function panels_context_node_settings_fo
 /**
  * Validate a node.
  */
-function panels_context_node_settings_form_validate($form, &$form_values) {
+function panels_context_node_settings_form_validate($form, &$form_state) {
   // Validate the autocomplete
+  $form_values = $form_state['value'];
   if (empty($form_values['external']) && empty($form_values['nid']) && empty($form_values['node'])) {
     form_error($form['node'], t('You must select a node.'));
     return;
@@ -154,12 +155,12 @@ function panels_context_node_settings_fo
   }
 }
 
-function panels_context_node_settings_form_submit($form, &$form_values, &$form_state) {
-  if ($form_values['set_identifier']) {
+function panels_context_node_settings_form_submit($form, &$form_state) {
+  if ($form_state['values']['set_identifier']) {
     $node = node_load($form_values['nid']);
     $form_state['values']['context']['identifier'] = $node->title;
   }
 
   // Don't let this be stored.
-  unset($form_values['set_identifier']);
+  unset($form_state['values']['set_identifier']);
 }
Index: contexts/vocabulary.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/contexts/vocabulary.inc,v
retrieving revision 1.2
diff -u -u -p -r1.2 vocabulary.inc
--- contexts/vocabulary.inc	16 Jul 2008 00:09:03 -0000	1.2
+++ contexts/vocabulary.inc	30 Aug 2008 23:15:19 -0000
@@ -34,7 +34,7 @@ function panels_context_create_vocabular
   }
 
   if ($conf) {
-    $data = taxonomy_get_vocabulary($data['vid']);
+    $data = taxonomy_vocabulary_load($data['vid']);
   }
 
   if (!empty($data)) {
Index: includes/common.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/includes/common.inc,v
retrieving revision 1.8
diff -u -u -p -r1.8 common.inc
--- includes/common.inc	18 Aug 2008 10:33:41 -0000	1.8
+++ includes/common.inc	30 Aug 2008 23:15:19 -0000
@@ -300,7 +300,7 @@ function panels_common_settings(&$form_s
 
   $form['submit'] = array(
     '#type' => 'submit',
-    '#value' => t('Submit'),
+    '#value' => t('Save'),
   );
 
   drupal_add_css(panels_get_path('css/panels_page.css'));
@@ -400,16 +400,16 @@ function panels_common_set_allowed_layou
   return $form;
 }
 
-function panels_common_set_allowed_layouts_validate($form_id, $form_values, $form) {
-  $selected = array_filter($form_values['layouts']);
+function panels_common_set_allowed_layouts_validate($form, &$form_state) {
+  $selected = array_filter($form_state['values']['layouts']);
   if (empty($selected)) {
     form_set_error('layouts', 'You must choose at least one layout to allow.');
   }
 }
 
-function panels_common_set_allowed_layouts_submit($form_id, $form_values) {
-  list($allowed_layouts) = $form_values['variables'];
-  foreach ($form_values['layouts'] as $layout => $setting) {
+function panels_common_set_allowed_layouts_submit($form, &$form_status) {
+  list($allowed_layouts) = $form_state['values']['variables'];
+  foreach ($form_state['values']['layouts'] as $layout => $setting) {
     $allowed_layouts->allowed_layout_settings[$layout] = $setting === 0 ? 0 : 1;
   }
   method_exists($allowed_layouts, 'save') ? $allowed_layouts->save() : $allowed_layouts->api_save();
Index: layouts/flexible/flexible.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/layouts/flexible/flexible.inc,v
retrieving revision 1.1
diff -u -u -p -r1.1 flexible.inc
--- layouts/flexible/flexible.inc	23 Jul 2008 21:14:28 -0000	1.1
+++ layouts/flexible/flexible.inc	30 Aug 2008 23:15:21 -0000
@@ -12,6 +12,7 @@ function panels_flexible_panels_layouts(
     'css' => 'flexible.css',
     'settings form' => 'panels_flexible_settings_form',
     'settings submit' => 'panels_flexible_settings_submit',
+    'settings validate' => 'panels_flexible_settings_validate',
     'panels function' => 'panels_flexible_panels',
   );
 
Index: panels_mini/panels_mini.admin.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/panels_mini/panels_mini.admin.inc,v
retrieving revision 1.4
diff -u -u -p -r1.4 panels_mini.admin.inc
--- panels_mini/panels_mini.admin.inc	22 Aug 2008 22:37:18 -0000	1.4
+++ panels_mini/panels_mini.admin.inc	30 Aug 2008 23:15:22 -0000
@@ -21,7 +21,7 @@ function _panels_mini_menu() {
   $items['admin/panels/panel-mini'] = array(
     'title' => 'Mini panels',
     'page callback' => 'panels_mini_list_page',
-    'description' => t('Create and administer mini panels (panels exposed as blocks).'),
+    'description' => 'Create and administer mini panels (panels exposed as blocks).',
   ) + $base;
   $items['admin/panels/panel-mini/list'] = array(
     'title' => 'List',
@@ -324,9 +324,9 @@ function panels_mini_import_form() {
 /**
  * Handle the submit button on importing a mini panel.
  */
-function panels_mini_import_form_submit($form_id, $form) {
+function panels_mini_import_form_submit($form, &$form_state) {
   ob_start();
-  eval($form['panel_mini']);
+  eval($form_state['values']['panel_mini']);
   ob_end_clean();
 
   if (isset($mini)) {
Index: panels_node_content/panels_node_content.module
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/panels_node_content/panels_node_content.module,v
retrieving revision 1.3
diff -u -u -p -r1.3 panels_node_content.module
--- panels_node_content/panels_node_content.module	18 Aug 2008 23:37:24 -0000	1.3
+++ panels_node_content/panels_node_content.module	30 Aug 2008 23:15:22 -0000
@@ -19,7 +19,7 @@ function panels_node_content_menu() {
     'access arguments' => array('access administration pages'),
     'type' => MENU_NORMAL_ITEM,
     'page callback' => 'panels_node_content_admin',
-    'description' => t('Information about the content node content type.'),
+    'description' => 'Information about the content node content type.',
   );
   return $items;
 }
@@ -185,7 +185,8 @@ function panels_node_content_edit($id, $
 /**
  * Validate a node.
  */
-function panels_node_content_edit_validate($form, &$form_values) {
+function panels_node_content_edit_validate($form, &$form_state) {
+  $form_values = $form_state['values'];
   if (!$form_values['validate_me']) {
     return;
   }
Index: panels_page/panels_page.admin.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/panels_page/panels_page.admin.inc,v
retrieving revision 1.16
diff -u -u -p -r1.16 panels_page.admin.inc
--- panels_page/panels_page.admin.inc	25 Aug 2008 04:12:28 -0000	1.16
+++ panels_page/panels_page.admin.inc	30 Aug 2008 23:15:22 -0000
@@ -52,10 +52,10 @@ function panels_page_list_page() {
     }
     else {
       if (empty($panel_page->disabled)) {
-        $ops[] = l(t('Disable'), "admin/panels/panel-page/disable/$panel_page->name", NULL, drupal_get_destination());
+        $ops[] = l(t('Disable'), "admin/panels/panel-page/disable/$panel_page->name", array('query' => drupal_get_destination()));
       }
       else {
-        $ops[] = l(t('Enable'), "admin/panels/panel-page/enable/$panel_page->name", NULL, drupal_get_destination());
+        $ops[] = l(t('Enable'), "admin/panels/panel-page/enable/$panel_page->name", array('query' => drupal_get_destination()));
       }
     }
 
@@ -175,11 +175,11 @@ function panels_page_delete_confirm(&$fo
 /**
  * Handle the submit button to delete a panel page.
  */
-function panels_page_delete_confirm_submit($form_id, $form) {
-  if ($form['confirm']) {
+function panels_page_delete_confirm_submit($form, &$form_state) {
+  if ($form_state['values']['confirm']) {
     panels_page_delete((object) $form);
     // TODO: Is this necessary or did we feed it the location already?
-    return 'admin/panels/panel-page';
+    $form_state['redirect'] = 'admin/panels/panel-page';
   }
 }
 
@@ -921,7 +921,7 @@ function panels_page_admin_view_submit($
   if (!empty($form_state['values']['additional'])) {
     $url .= "/" . $form_state['values']['additional'];
   }
-  return $url;
+  $form_state['redirect'] = $url;
 }
 
 
Index: panels_page/panels_page.install
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/panels_page/panels_page.install,v
retrieving revision 1.14
diff -u -u -p -r1.14 panels_page.install
--- panels_page/panels_page.install	22 Aug 2008 22:37:18 -0000	1.14
+++ panels_page/panels_page.install	30 Aug 2008 23:15:22 -0000
@@ -132,6 +132,13 @@ function panels_page_schema_1() {
       'menu_parent_tab_weight' => array(
         'type' => 'int',
         'size' => 'tiny',
+      ),
+      'loader_flags' => array(
+        'description' => t('Bitvalues used to determine the status of the panels_page override at a given path.'),
+        'type' => 'int',
+        'size' => 'tiny',
+        'not null' => TRUE,
+        'default' => 0,
       )
     ),
     'primary key' => array('pid'),
@@ -152,129 +159,129 @@ function panels_page_schema_1() {
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
-        'default' => ''
+        'default' => '',
       ),
       'load_functions' => array(
         'description' => t('A serialized array of function names (like node_load) to be called to load an object corresponding to a part of the current path.'),
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
-        'default' => ''
+        'default' => '',
       ),
       'to_arg_functions' => array(
         'description' => t('A serialized array of function names (like user_uid_optional_to_arg) to be called to replace a part of the router path with another string.'),
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
-        'default' => ''
+        'default' => '',
       ),
       'access_callback' => array(
         'description' => t('The callback which determines the access to this router path. Defaults to user_access.'),
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
-        'default' => ''
+        'default' => '',
       ),
       'access_arguments' => array(
         'description' => t('A serialized array of arguments for the access callback.'),
         'type' => 'text',
-        'not null' => FALSE
+        'not null' => FALSE,
       ),
       'page_callback' => array(
         'description' => t('The name of the function that renders the page.'),
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
-        'default' => ''
+        'default' => '',
       ),
       'page_arguments' => array(
         'description' => t('A serialized array of arguments for the page callback.'),
         'type' => 'text',
-        'not null' => FALSE
+        'not null' => FALSE,
       ),
       'fit' => array(
         'description' => t('A numeric representation of how specific the path is.'),
         'type' => 'int',
         'not null' => TRUE,
-        'default' => 0
+        'default' => 0,
       ),
       'number_parts' => array(
         'description' => t('Number of parts in this router path.'),
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'size' => 'small'
+        'size' => 'small',
       ),
       'tab_parent' => array(
         'description' => t('Only for local tasks (tabs) - the router path of the parent page (which may also be a local task).'),
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
-        'default' => ''
+        'default' => '',
       ),
       'tab_root' => array(
         'description' => t('Router path of the closest non-tab parent page. For pages that are not local tasks, this will be the same as the path.'),
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
-        'default' => ''
+        'default' => '',
       ),
       'title' => array(
         'description' => t('The title for the current page, or the title for the tab if this is a local task.'),
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
-        'default' => ''
+        'default' => '',
       ),
       'title_callback' => array(
         'description' => t('A function which will alter the title. Defaults to t()'),
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
-        'default' => ''
+        'default' => '',
       ),
       'title_arguments' => array(
         'description' => t('A serialized array of arguments for the title callback. If empty, the title will be used as the sole argument for the title callback.'),
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
-        'default' => ''
+        'default' => '',
       ),
       'type' => array(
         'description' => t('Numeric representation of the type of the menu item, like MENU_LOCAL_TASK.'),
         'type' => 'int',
         'not null' => TRUE,
-        'default' => 0
+        'default' => 0,
       ),
       'block_callback' => array(
         'description' => t('Name of a function used to render the block on the system administration page for this item.'),
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
-        'default' => ''
+        'default' => '',
       ),
       'description' => array(
         'description' => t('A description of this item.'),
         'type' => 'text',
-        'not null' => TRUE
+        'not null' => TRUE,
       ),
       'position' => array(
         'description' => t('The position of the block (left or right) on the system administration page for this item.'),
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
-        'default' => ''
+        'default' => '',
       ),
       'weight' => array(
         'description' => t('Weight of the element. Lighter weights are higher up, heavier weights go down.'),
         'type' => 'int',
         'not null' => TRUE,
-        'default' => 0
+        'default' => 0,
       ),
       'file' => array(
         'description' => t('The file to include for this element, usually the page callback function lives in this file.'),
         'type' => 'text',
-        'size' => 'medium'
+        'size' => 'medium',
       ),
     ),
     'indexes' => array(
@@ -295,3 +302,9 @@ function panels_page_uninstall() {
   drupal_uninstall_schema('panels_page');
 }
 
+function panels_page_update_6000() {
+  $ret = array();
+  db_add_field($ret, 'panels_page', 'loader_flags', array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0));
+  return $ret;
+}
+
Index: panels_page/panels_page.menu.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/panels_page/panels_page.menu.inc,v
retrieving revision 1.20
diff -u -u -p -r1.20 panels_page.menu.inc
--- panels_page/panels_page.menu.inc	22 Aug 2008 22:37:18 -0000	1.20
+++ panels_page/panels_page.menu.inc	30 Aug 2008 23:15:22 -0000
@@ -4,7 +4,7 @@
 /**
  * @file panels_page.menu.inc
  *
- * Functions resposnible for constructing the panels_page menu routing &
+ * Functions responsible for constructing the panels_page menu routing &
  * overriding system.
  */
 
@@ -340,6 +340,7 @@ function panels_page_get_raw_path($path)
  */
 function _panels_page_menu_router_build($callbacks, $matches) {
   $menu = array();
+  $sort = array();
   foreach ($matches as $path => $match) {
     $item = $callbacks[$path];
     $load_functions = array();
Index: panels_page/panels_page.module
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/panels_page/panels_page.module,v
retrieving revision 1.33
diff -u -u -p -r1.33 panels_page.module
--- panels_page/panels_page.module	25 Aug 2008 04:12:28 -0000	1.33
+++ panels_page/panels_page.module	30 Aug 2008 23:15:23 -0000
@@ -36,9 +36,9 @@ define('PANELS_PID_SHARES_PATH', 1 << 2 
 /**
  * Implementation of hook_help().
  */
-function panels_page_help($section = '') {
+function panels_page_help($path, $arg) {
   $output = NULL;
-  switch ($section) {
+  switch ($path) {
     case 'admin/panels/panel-page':
     case 'admin/panels/panel-page/list':
       $output = '<p>';
@@ -56,6 +56,17 @@ function panels_page_help($section = '')
 }
 
 /**
+ * Implementation of hook_theme().
+ */
+function panels_page_theme() {
+  $theme = array();
+  $theme['panels_page_render_form'] = array(
+    'arguments' => array('form'),
+  );
+  return $theme;
+}
+
+/**
  * Implementation of hook_perm().
  */
 function panels_page_perm() {
@@ -136,6 +147,22 @@ function panels_page_admin_cache_load($n
 }
 
 /**
+ * Get the render-time behavior of the panels_page from the arguments,
+ * which can be pid-$pid or $panel_name.
+ *
+ * @param $args
+ * @return integer
+ */
+// @TODO: What should we call this helper function?
+// @TODO: Do you need all the pid- in panels_page.menu.inc, it makes this harder.
+function panels_page_get_loader_data_from_args($args) {
+  // Get the pid, which is passed in with a prepended string.
+  $arg = array_shift($args);
+  $pid = preg_match('/pid-([0-9])+/', $arg, $matches) ? $matches[0] : $arg;
+  return panels_page_get_loader_data($pid, $args);
+}
+
+/**
  * Check whether the current page request is allowed.
  *
  * Note that this handler is ONLY used by static panel_pages; the rest are all
@@ -144,10 +171,7 @@ function panels_page_admin_cache_load($n
  * @return boolean
  */
 function panels_page_access_handler() {
-  $args = func_get_args();
-  // Get the pid, which is passed in with a prepended string.
-  $pid = substr(array_shift($args), 4);
-  $loader_data = panels_page_get_loader_data($pid, $args);
+  $loader_data = panels_page_get_loader_data_from_args(func_get_args());
   return $loader_data['access'];
 }
 
@@ -162,28 +186,18 @@ function panels_page_access_handler() {
  * @return mixed
  */
 function panels_page_render_handler() {
-  $args = func_get_args();
-  // Get the pid, which is passed in with a prepended string.
-  // TODO switch to name...
-  $pid = substr(array_shift($args), 4);
-  $loader_data = panels_page_get_loader_data($pid, $args);
-
+  $loader_data = panels_page_get_loader_data_from_args(func_get_args());
   return call_user_func_array($loader_data['page callback'], $loader_data['page arguments']);
 }
 
 function panels_page_static_render_handler() {
-  $args = func_get_args();
-  // Get the pid, which is passed in with a prepended string.
-  $pid = substr(array_shift($args), 4);
-  $loader_data = panels_page_get_loader_data($pid, $args);
-  return panels_page_render_page_normal($loader_data['panel_page']);
+  $loader_data = panels_page_get_loader_data_from_args(func_get_args());
+  // @TODO: what arguments get passed here, the func args or the panel args?
+  return panels_page_render_page_normal($loader_data['panel_page'], array());
 }
 
 function panels_page_title_handler() {
-  $args = func_get_args();
-  // Get the pid, which is passed in with a prepended string.
-  $pid = substr(array_shift($args), 4);
-  $loader_data = panels_page_get_loader_data($pid, $args);
+  $loader_data = panels_page_get_loader_data_from_args(func_get_args());
   if ($loader_data['fallback'] === TRUE) {
     return _menu_item_localize($loader_data['router item'], $loader_data['map']);
   }
@@ -470,6 +484,7 @@ function panels_page_panels_exportables(
   static $all_panels = NULL;
   if ($op == 'list') {
     if (empty($all_panels)) {
+      panels_page_load_include('read');
       $all_panels = panels_page_load_all();
     }
 
@@ -484,8 +499,9 @@ function panels_page_panels_exportables(
     $code .= " * Implementation of hook_default_panel_pages()\n";
     $code .= " */\n";
     $code .= "function " . $name . "_default_panel_pages() {\n";
+    panels_page_load_include('write');
     foreach ($panels as $panel => $truth) {
-      $code .= panels_page_export($all_panels[$panel], '  ');
+      $code .= panels_page_export_page($all_panels[$panel], '  ');
       $code .= '  $pages[\'' . check_plain($panel) . '\'] = $page;' . "\n\n\n";
     }
     $code .= "  return \$pages;\n";
Index: panels_page/panels_page.write.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/panels_page/panels_page.write.inc,v
retrieving revision 1.6
diff -u -u -p -r1.6 panels_page.write.inc
--- panels_page/panels_page.write.inc	25 Aug 2008 04:12:28 -0000	1.6
+++ panels_page/panels_page.write.inc	30 Aug 2008 23:15:23 -0000
@@ -166,7 +166,7 @@ function panels_page_delete($panel_page)
  *
  * The code returned from can be used directly in panels_page_save().
  */
-function panels_page_export($panel_page, $prefix = '') {
+function panels_page_export_page($panel_page, $prefix = '') {
   // Make sure the primary display is the current display.
   panels_page_fetch_primary_display($panel_page);
   $output = '';
@@ -174,10 +174,9 @@ function panels_page_export($panel_page,
   $output .= $prefix . '$page = new stdClass()' . ";\n";
   $output .= $prefix . '$page->pid = \'new\'' . ";\n";
   foreach (array_keys($fields) as $field) {
-    if (!isset($panel_page->$field) || in_array($field, array('displays', 'contexts', 'display'))) {
-      continue;
+    if (isset($panel_page->$field) && !in_array($field, array('displays', 'contexts', 'display'))) {
+      $output .= $prefix . '  $page->' . $field . ' = ' . panels_var_export($panel_page->$field, '  ') . ";\n";
     }
-    $output .= $prefix . '  $page->' . $field . ' = ' . panels_var_export($panel_page->$field, '  ') . ";\n";
   }
   // Export the contexts.
   $output .= $prefix . '$page->contexts = array()' . ";\n";
Index: panels_simple_cache/panels_simple_cache.module
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/panels_simple_cache/panels_simple_cache.module,v
retrieving revision 1.2
diff -u -u -p -r1.2 panels_simple_cache.module
--- panels_simple_cache/panels_simple_cache.module	16 Jul 2008 00:09:05 -0000	1.2
+++ panels_simple_cache/panels_simple_cache.module	30 Aug 2008 23:15:23 -0000
@@ -11,21 +11,23 @@
 /**
  * Implementation of hook_menu().
  */
-/*
-function panels_simple_cache_menu($may_cache) {
-  if ($may_cache) {
-    $items[] = array(
-      'path' => 'admin/panels/simple-cache',
-      'title' => t('Simple cache'),
-      'access' => user_access('access administration pages') && user_access('use panels caching features'),
-      'type' => MENU_NORMAL_ITEM,
-      'callback' => 'panels_simple_cache_admin',
-      'description' => t('Information about Panels simple cache.'),
-    );
-    return $items;
-  }
+function panels_simple_cache_menu() {
+  $items['admin/panels/simple-cache'] = array(
+    'title' => 'Simple cache',
+    'access' => 'panels_simple_cache_access',
+    'type' => MENU_NORMAL_ITEM,
+    'callback' => 'panels_simple_cache_admin',
+    'description' => 'Information about Panels simple cache.',
+  );
+  return $items;
+}
+
+/**
+ * Access callback for the simple_cache administration menu.
+ */
+function panels_simple_cache_access() {
+  return user_access('access administration pages') && user_access('use panels caching features');
 }
-*/
 
 /**
  * Page callback for the very short admin page.
@@ -77,7 +79,7 @@ function panels_simple_cache_get_cache($
  */
 function panels_simple_cache_set_cache($conf, $content, $display, $args, $contexts, $pane = NULL) {
   $cid = panels_simple_cache_get_id($conf, $display, $args, $contexts, $pane);
-  cache_set($cid, 'cache', serialize($content));
+  cache_set($cid, $content);
 }
 
 /**
Index: panels_views/panels_views.module
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/panels/panels_views/panels_views.module,v
retrieving revision 1.3
diff -u -u -p -r1.3 panels_views.module
--- panels_views/panels_views.module	18 Aug 2008 23:37:24 -0000	1.3
+++ panels_views/panels_views.module	30 Aug 2008 23:15:23 -0000
@@ -25,7 +25,7 @@ function panels_views_menu() {
     'type' => MENU_NORMAL_ITEM,
     'page callback' => 'drupal_get_form',
     'page arguments' => array('panels_views_admin_page'),
-    'description' => t('Configure Views to be used as panes within panel displays.'),
+    'description' => 'Configure Views to be used as panes within panel displays.',
   ) + $base;
 
   return $items;
