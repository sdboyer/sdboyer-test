/** 
 * OVERVIEW
/* 
The Visualize Backtrace module enables you to visualize the sequential 
order of Drupal function calls for a given page load in both a hierarchical tree 
flowchart and table format. This is a developer's tool to help demystify the
Drupal API, and to help identify bottleneck Drupal functions.

An introductory screencast demonstrating the visualize backtrace module can be
seen here: http://blip.tv/file/431841 (be sure to expand to full screen mode.)

This module transforms trace files created by XDebug into flowcharts 
that include:
 * Hypertext links to the specific line number where the Drupal function 
   was executed within the source code -- the PHP-highlighted code 
   source pages are generated by this module.
 * Ability to plot all of the backtraces of a specific function call -- as
   well as an option to additionally plot the children functions in a
   "forwardtrace."
 * Ability to plot all of the bactraces and forwardtraces of the Drupal
   functions that were called from a specific module filename -- including the
   option of all contributed module functions.
 * Execution time for each function call -- as well as elapsed time of all
   children functions of a specific function.
 * Hypertext links to function descriptions at api.drupal.org to provide more
   context for each function.
 * Functions are labeled and color-coded according to which filename 
   called them.
 * Looping sets of 1, 2 or 3 function pairs are filtered out and labeled 
   as repeating.  
 * Procedural Drupal hooks are labeled with the PHP function & location
   that called it.
 * Sequential ordering of all of the Drupal function calls for a page load
   from top-to-bottom and left-to-right.
 * All text on the flowchart is searchable to quickly find functions or
   to step through sequential function calls


/** 
 * REQUIREMENTS 
/* 
This module requires that XDebug is properly set up in order to create 
the trace files, which more information on this can be found in the 
INSTALL.txt. You should have access to the php.ini and .htaccess files
to set it up.  You should also be able to have write permissions to the 
same directory where the trace files are generated (e.g. "/tmp"). Download
XDebug at http://xdebug.org

You can also optionally alter Apache httpd.conf permissions in order to 
automatically launch the ZGRViewer java applet flowchart viewer from the
command-line via Drupal. More details on installing ZGRViewer are also
in the INSTALL.txt.  It is also possible to copy and paste the CLI commands
into a UNIX terminal window if you have issues with doing it automatically 
-- or if the Drupal-launched terminal window is crashing after a couple
of minutes.  More details at http://zvtm.sourceforge.net/zgrviewer.html#download

Another option for viewing the *.dot flowcharts is to use GraphViz itself, 
which has a Mac OSX client at http://www.pixelglow.com/graphviz

Again, more set-up details can be found in the INSTALL.txt.


/** 
 * HOW TO TEST THAT XDEBUG IS WORKING PROPERLY
/* 
You can test to see if XDebug is properly creating trace files by going 
to the path: "/test_xdebug" -- that is after you've already enabled the 
module with proper access permission of "administer visualize backtrace."

If XDebug is not set up properly, then you may receive an infamous White 
Screen of Death if you've pre-maturely enabled the "Visualize Backtrace" 
block. This is because this block calls the xdebug_get_tracefile_name() 
function, which returns the latest trace file name & trace path (e.g.
"/tmp/trace.1191258238.xt")  

   
/** 
 * VISUALIZE BACKTRACE BLOCK
/* 
The easiest way to generate a function call flowchart for a given Drupal 
page load is to enable the "Visualize Backtrace" block. NOTE: Be sure 
that XDebug is properly installed first as detailed down below.  The following
two links provide an easy way to parse the XDebug trace files.

 * Generate Backtrace Data for this Page Load: 
   Quickly processes the XDebug trace file for the particular page load 
   and provides a splash page for accessing the other flowcharts and tables.

 * View All Past Trace Files
   Displays all of the XDebug trace files that have been created since the last
   time you rebooted or purged your trace file directory. Trace files that have
   already been parsed and displayed are highlighted. This could page is helpful
   in tracking down page loads from AJAX calls or that don't display the links
   from the Visualize Backtrace block.


/** 
 * WARNING: USE WITH CAUTION
/* 
I'd recommend using this within a localhost environment, but use caution 
when using this on a production server since permissions to this module
could reveal the source code of your PHP files. 

Another consideration is that the *.dot files are created within the 
publicly available /files folder, and could be theoretically be downloaded 
if one correctly guessed the *.dot filename.

Also be aware that you will probably need to periodically delete old 
XDebug trace files since they it can generate over 1MB worth of trace data
per Drupal page load.  If the trace files are stored in the /tmp directory, 
then they may automatically be purged when rebooting your computer.  

There are also 1-3MB of *.dot files are created whenever the trace files
are parsed, and so old *.dot files stored in the /files directory may also 
need to be periodically manually purged as well.

The visualize_backtrace module is currently maintained by:
- Kent Bye (http://drupal.org/user/21673) 

// $Id: README.txt,v 1.2.2.1 2007/10/23 21:22:07 kentbye Exp $