<?php
// $Id: og.install,v 1.58 2008/06/18 18:50:38 weitzman Exp $

/**
 * TODO: upgrade all update_14+ updates to d6
 */


/**
 * Definition of hook_schema();
 */
function og_schema() {
  $schema = array();

  $schema['og'] = array(
    'description'     => 'Stores information about each group',
    'fields'          => array(
      'nid'             => array(
        'description'     => 'The group\'s {node}.nid',
        'type'            => 'int',
        'size'            => 'normal',
        'not null'        => TRUE,
      ),
      'selective'       => array(
        'description'     => 'Determines how subscription requests are handled (open, moderated, invite only, closed).',
        'type'            => 'int',
        'size'            => 'normal',
        'not null'        => TRUE,
        'default'         => 0,
      ),
      'description'     => array(
        'description'     => 'Group description. Shows up by default on group directory.',
        'type'            => 'varchar',
        'length'          => 255,
        'not null'        => FALSE,
      ),
      'theme'           => array(
        'description'     => 'The group specific theme (if any). See {system}.name.',
        'type'            => 'varchar',
        'length'          => 255,
        'not null'        => FALSE,
      ),
      'register'        => array(
        'description'     => 'Should users be able to join this group from registration form.',
        'type'            => 'int',
        'size'            => 'tiny',
        'not null'        => TRUE,
        'default'         => 0,
      ),
      'directory'       => array(
        'description'     => 'Should this group appear in the groups directory.',
        'type'            => 'int',
        'size'            => 'tiny',
        'not null'        => TRUE,
        'default'         => 0,
      ),
      'notification'    => array(
        'description'     => 'Not currently used.',
        'type'            => 'int',
        'size'            => 'tiny',
        'not null'        => TRUE,
        'default'         => 0,
      ),
      'language'        => array(
        'description'     => 'Group specific language. See {languages}.language.',
        'type'            => 'varchar',
        'length'          => 12,
        'not null'        => TRUE,
        'default'         => '',
      ),
      'private'         => array(
        'description'     => 'Is group home page private or public.',
        'type'            => 'int',
        'size'            => 'tiny',
        'not null'        => TRUE,
        'default'         => 0,
      ),
    ),
    'primary key'       => array('nid'),
  );

  $schema['og_uid'] = array(
    'description'     => 'Group memberships',
    'fields'          => array(
      'nid'             => array(
        'description'     => 'Group\'s {node}.nid',
        'type'            => 'int',
        'size'            => 'normal',
        'not null'        => TRUE,
      ),
      'og_role'         => array(
        'description'     => 'Not currently used.',
        'type'            => 'int',
        'size'            => 'tiny',
        'not null'        => TRUE,
        'default'         => 0,
      ),
      'is_active'       => array(
        'description'     => 'Is this membership active or pending?',
        'type'            => 'int',
        'size'            => 'tiny',
        'not null'        => TRUE,
        'default'         => 0,
      ),
      'is_admin'        => array(
        'description'     => 'Is this user a group administrator',
        'type'            => 'int',
        'size'            => 'tiny',
        'not null'        => TRUE,
        'default'         => 0,
      ),
      'uid'             => array(
        'description'     => 'The user for this membership. See {users}.uid.',
        'type'            => 'int',
        'size'            => 'normal',
        'not null'        => TRUE,
      ),
      'mail_type'       => array(
        'description'     => 'Email notification preference.',
        'type'            => 'int',
        'size'            => 'normal',
        'not null'        => FALSE,
      ),
      'created'         => array(
        'description'     => 'Time when this membership was created.',
        'type'            => 'int',
        'size'            => 'normal',
        'not null'        => FALSE,
        'default'         => 0,
      ),
      'changed'         => array(
        'description'     => 'Time when this membership was last changed.',
        'type'            => 'int',
        'size'            => 'normal',
        'not null'        => FALSE,
        'default'         => 0,
      ),
    ),
    'primary key'       => array('nid', 'uid'),
  );
  $schema['og_uid_global']  = array(
    'description'     => 'User preferences that are not group specific.',
    'fields'          => array(
      'uid'             => array(
        'description'     => 'The user. See {users}.uid.',
        'type'            => 'int',
        'size'            => 'normal',
        'not null'        => TRUE,
      ),
      'og_email'        => array(
        'description'     => 'Notification preference for group posts (always, never, depends per group)',
        'type'            => 'int',
        'size'            => 'normal',
        'not null'        => TRUE,
        'default'         => 2,
      ),
    ),
    'primary key'     => array('uid'),
  );
  $schema['og_ancestry'] = array(
    'description'     => '',
    'fields'          => array(
      'nid'             => array(
        'description'     => 'The post\'s {node}.nid.',
        'type'            => 'int',
        'size'            => 'normal',
        'not null'        => TRUE,
      ),
      'group_nid'       => array(
        'description'     => 'The group\'s {node}.nid',
        'type'            => 'int',
        'size'            => 'normal',
        'not null'        => TRUE,
      ),
      'is_public'       => array(
        'description'     => 'Is this a public or private post? This value is always the same across all groups for a given post.',
        'type'            => 'int',
        'size'            => 'tiny',
        'default'         => 1,
        'not null'        => TRUE,
      ),
    ),
    'indexes'         => array(
      'nid'             => array('nid'),
      'group_nid'       => array('group_nid'),
    ),
  );

  return $schema;
}

function og_install() {
  drupal_install_schema('og');

  // enable standard og blocks. for custom profiles, block may not be included yet.
  if (function_exists('block_rehash')) {
    _block_rehash();
  }
  

  // Need og_readme() function.
  drupal_load('module', 'og');
  drupal_set_message(t('Organic groups module enabled. Please see the included !README file for further installation instructions.', array('!README' => og_readme())));
}

// First 5.x update.
// use the new na_arbitrator way of writing to node_access table
function og_update_14() {
  switch ($GLOBALS['db_type']) { 
    case 'mysql': 
    case 'mysqli': 
      $ret[] = update_sql("CREATE TABLE {og_ancestry} (
        nid int(11) NOT NULL,
        group_nid int(11) NOT NULL,
        is_public int(1) NULL,
        KEY  (nid),
        KEY  (group_nid)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
    break;
    case 'pgsql':
      db_query("CREATE TABLE {og_ancestry} (
        nid int NOT NULL,
        group_nid int NOT NULL,
        is_public smallint NOT NULL
      );");
      db_query("CREATE INDEX {og_ancestry}_nid_idx ON {og_ancestry} (nid);");
      db_query("CREATE INDEX {og_ancestry}_group_nid_idx ON {og_ancestry} (group_nid);");
    break;
  }
  og_migrate_type_basic_14();
  
  // populate og_ancestry.
  $result = db_query_temporary(
    "SELECT na.nid, na.gid, IF(MIN(na.realm) = 'og_all', 1, 0) AS is_public 
     FROM {node_access} na INNER JOIN {node} n ON na.nid=n.nid 
     WHERE realm IN ('og_all', 'og_subscriber') AND n.type NOT IN ('%s') GROUP BY na.nid, na.gid ORDER BY nid ASC", 
       implode(', ', variable_get('og_node_types', array('og'))), 'og_migrate');
  $sql = "INSERT INTO {og_ancestry} (nid, group_nid, is_public) SELECT nid, gid, is_public FROM {og_migrate}";
  db_query($sql);
  
  // rebuild takes care of writing new access records
  // too bad this part can't be performed over multiple updates
  node_access_rebuild();
  return array();
}

// Create a user managed node type which replaces the deprecated og_basic module
// helper function for og_update_14
function og_migrate_type_basic_14() {
  if (og_is_group_type('og')) {
    $info = array('type' => 'og', 'name' => 'group', 'module' => 'node', 'has_title' => 1, 'title_label' => 'Group name', 'has_body' => 1, 'body_label' => 'Welcome message', 'description' => 'A group provides a home page for like minded users. There they post articles about their shared interest.', 'help' => '', 'min_word_count' => 0, 'custom' => 1, 'modified' => 1, 'locked' => 0, 'orig_type' => 'og');
    node_type_save((object)$info);
    module_disable(array('og_basic'));
    node_types_rebuild();
  }
}

function og_update_15() {
  variable_del('og_max_posts');
  variable_del('og_home_page_presentation');
  return array();
}

function og_update_16() {
  // we are no longer denying access to nodes without groups. see http://drupal.org/node/107289
  if (variable_get('og_enabled', 0)) {
    node_access_rebuild();
  }
  return array();
}

function og_update_17() {
  // we are once again putting group nodes into the node access system. see http://drupal.org/node/128306
  if (variable_get('og_enabled', 0)) {
    node_access_rebuild();
  }
  return array();
}

function og_update_18() {
  // woops. got it a bit wrong last time
  if (variable_get('og_enabled', 0)) {
    node_access_rebuild();
  }
  return array();
}

function og_update_19() {
  og_populate_uid_global_table();
  return array('Populated og_uid_global table');
}

function og_update_20() {
  switch ($GLOBALS['db_type']) {
  case 'mysql':
  case 'mysqli':
    $ret[] = update_sql("ALTER TABLE {og} ADD private int(1) NOT NULL default 0");
    break;
  case 'pgsql':
    $ret[] = update_sql("ALTER TABLE {og} ADD private smallint NOT NULL default 0");
    break;
  }
  return $ret;
}

/**
 * Changes '@body' to '@node_teaser' in existing e-mail templates.
 */ 
function og_update_5600() {
  $ret = array();
  $variables = array('og_new_node_body', 'og_new_node_subject');
  foreach ($variables as $variable) {
    $value = variable_get($variable, '');
    if (!empty($value)) {
      variable_set($variable, str_replace('@body', '@node_teaser', $value));
      $ret[] = array('success' => TRUE, 'query' => "Replaced @body with @node_teaser in $variable");
    }
  }
  return $ret;
}

/**
 * Enable og_access module if needed
 */ 
function og_update_5700() {
  $ret = array();
  if (variable_get('og_enabled', FALSE) && !module_exists('og_access')) {
    module_enable('og_access');
  }
  // variable_del('og_enabled'); is harmless to leave around, and will help if someone reruns the update.
  
  return $ret;
}

/**
 * Update variables to new content type system. Also rebuild node_access for new grants system.
 * 
 * @return void
 **/
function og_update_5701() {
  $ret = array();
  $types = node_get_types();
  foreach ($types as $type) {
    if (in_array($type->type, variable_get('og_node_types', array('og')))) {
      variable_set('og_content_type_usage_'. $type->type, 'group');
    }
    elseif (in_array($type->type, variable_get('og_omitted', array('og')))) {
      variable_set('og_content_type_usage_'. $type->type, 'omitted');
    }
    elseif (in_array($type->type, variable_get('og_omitted_email_node_types', array('og')))) {
     variable_set('og_content_type_usage_'. $type->type, 'group_post_standard_nomail');
    }
    else {
      variable_set('og_content_type_usage_'. $type->type, 'group_post_standard_mail');
    } 
  }
 
 node_access_rebuild();
 return $ret;
}

function og_update_6000() {
  $ret = array();
  // Fix how we append the custom request text from a group join request.
  $name = 'og_request_user_body';
  if ($txt = variable_get($name, FALSE)) {
    $txt .= "\n\nPersonal message from @username:\n------------------\n\n@request";
    variable_set($name, $txt);
  }
}

// end updates //

function og_enable() {
  og_populate_uid_global_table();
}

// Need to populate og_uid_global for existing users. Uses a subquery.
// This is called from update 13 & 19 & og_enable(). 
function og_populate_uid_global_table() {
  $subquery = 'SELECT u.uid, %d FROM {users} u LEFT JOIN {og_uid_global} oug ON u.uid=oug.uid WHERE u.uid > 0 AND oug.og_email IS NULL';
  $sql = "INSERT INTO {og_uid_global} (uid, og_email) $subquery";
  db_query($sql, OG_NOTIFICATION_SELECTIVE);
}

function og_uninstall() {
  drupal_uninstall_schema('og');

  // Delete variables
  $variables = array(
    'og_help', 'og_block_cnt_2', 'og_block_cnt_3',
    'og_audience_checkboxes', 'og_omitted', 'og_content_type_usage',
    'og_audience_required', 'og_omitted_email_node_types',
    'og_visibility_directory', 'og_visibility_registration',
    'og_home_page_view', 'og_email_max', 'og_node_types',
    'og_admin_email_body', 'og_email_notification_pattern',
    'og_approve_user_body', 'og_approve_user_subject',
    'og_deny_user_body', 'og_deny_user_subject',
    'og_invite_user_body', 'og_invite_user_subject',
    'og_new_admin_body', 'og_new_admin_subject',
    'og_new_node_body', 'og_new_node_subject',
    'og_notification', 'og_request_user_body', 'og_request_user_subject',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }
}
